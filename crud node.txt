Database
const mongoose=require("mongoose");
mongoose.connect("mongodb://localhost:27017/internalpractice",{
    useNewUrlParser:true,
    useUnifiedTopology:true
}).then(()=>{
    console.log("Connection successful");
}).catch((e)=>
{
    console.log(`no connection ${e}`);
})
Model
const mongoose=require("mongoose");
const EmployeeSchema=mongoose.Schema({
    Name:{
        type:String,
        require:true
    },
    Email:{
        type:String,
        require:true
    },
    Contactno:{
        type:Number,
        require:true
    },
    Gender:{
        type:String,
        require:true
    },
    City:{
        type:String,
        require:true
    },
    pic:{
        type:String,
        require:true
    }
});
const Employee=new mongoose.model("employee",EmployeeSchema);
module.exports=Employee;
---app.js
const express=require("express");
const app=express();
const Employee=require("./model/employee");
const Admin = require('./model/admin');
const db=require("./db/conn");
const session = require('express-session');
//setting the port
const port=process.env.PORT||8000;
//requiring the view template engine handle bar 
const hbs=require("hbs");
//multer for file upload
const multer=require("multer");
//converting the post data to json format
const bodyparser=require("body-parser");
const async = require("hbs/lib/async");
app.use(bodyparser.json());
app.use(bodyparser.urlencoded({
    extended:true
}));
app.use(session({
    secret:'alksncoasnocvnsmdaocn',
    resave:false,
    saveUninitialized:false
}))
app.use(express.static("public"));
//view
//app.use(express.urlencoded({extended:true}))
//api
//app.use(express.json())
app.set("view engine","hbs");
const fileStorageEngine=multer.diskStorage({
    destination:(req,file,cb)=>{
        cb(null,'./public/images')
    },
    filename:(req,file,cb)=>{
        cb(null,Date.now()+'--'+file.originalname)
    }
});

const upload = multer({
    storage:fileStorageEngine
}).single('pic')


app.get("/login",(req,res) => {
    res.render("login");
})

app.post('/login',(req,res) => {
    
    Admin.findOne({
        "email" : req.body.email,
        "password" : req.body.password
    }, (err,data) => {
        if(data){   
            req.session.loggedin = true;
            req.session.email = data.email;
            res.redirect('/');
        }
        else{
            //res.render('login',{err:true,msg:"imvalid credentials"})
            console.log("invalid");
        }
    })
})


app.get('/logout',(req,res) => {
    if(req.session.loggedin){
        req.session.destroy((err) => {
            if(err) return cronsole.log(err);
            res.clearCookie('connect.sid');
            res.redirect('/login');
        })
    }else{
        console.log("logged in");
    }
})


// app.get("/",(req,res)=>{
//     res.send("Hello");
// })
//open list page with data
app.get("/",(req,res)=>{
    if(req.session.loggedin){
        try {
            Employee.find((err,docs)=>{
                if(!err)
                {
                    console.log(docs);
                    res.render("list",{
                        list:docs,
                        viewTitle:"Employee List",
                        email:req.session.email
                    });
                }   
                else
                {
                    console.log("error in retriveing employee list"+err);
                }
            });
        } catch (error) {
            res.status(401).send(error);
        }
    }else{
        res.redirect('/login');
    }
});
//open Employee form
app.get("/student",(req,res)=>{
    try {
            res.render("create",{
                viewTitle:"Add Employee"
            });
    } catch (error) {
        console.log(`erro in opening the page ${error}`);
    }
});
//add employee data
app.post("/student/add",upload,(req,res)=>{
    try {
            var empdata=new Employee();
            empdata.Name=req.body.Name;
            empdata.Email=req.body.Email;
            empdata.Gender=req.body.Gender;
            empdata.Contactno=req.body.Contactno;
            empdata.City=req.body.City;
            empdata.pic = req.file.filename;
            empdata.save((err,docs)=>{
                if(!err)
                {
                    res.redirect("/");
                }
                else
                {
                    console.log(`erro in adding the data ${err}`);
                }
            })
    } catch (error) {
        console.log(`erro in adding the data ${error}`);
    }
});
//delete employee data
app.get("/student/delete/:id",(req,res)=>{
    try {
        const id=req.params.id;
        Employee.findByIdAndRemove(id,(err,doc)=>{
            if(!err)
            {
                console.log("Deleted");
                res.redirect('/');
            }
            else
            {
                console.log("Error in deleteing record:"+err)
            }
        });
    } catch (error) {
        console.log(`data is not delete${error}`);
    }
});
//get data on update
app.get("/student/edit/:id",(req,res)=>{
    try {
        Employee.findById(req.params.id,(err,doc)=>{
            if(!err)
            {
                res.render("edit",{
                    student:doc,
                    viewTitle:"Update Employee"
                });
            }
            else
            {
                console.log("Error in reterving data"+err);
            }
        })
    } catch (error) {
        console.log(`error on getting data by id${error}`);
    }
})
//update data employee
app.post("/student/edit/:id",(req,res)=>{
    try {
        console.log(req.params.id);
        Employee.findByIdAndUpdate({_id:req.params.id},req.body,{new:true},(err,doc)=>{
            if(!err)
            {
                res.redirect('/');
            }
            else
            {
                console.log("Error during record update"+err);
            }
        })
    } catch (error) {
        console.log(`error on updateing data by id${error}`);
    }
})

app.listen(port,()=>{
    console.log(`running on the port no ${port}`);
})
---views
Create
<body>
    <h1>{{viewTitle}}</h1>
    <form action="/student/add" method="post" enctype="multipart/form-data">
                <div class="form-group">
                    <label>Name</label>
                    <input type="text" name="Name" class="form-control">
                </div>
                <div class="form-group">
                    <label>Email</label>
                    <input type="email" name="Email" class="form-control">
                </div>
                <div class="form-group">
                    <label>Contactno</label>
                    <input type="number" name="Contactno" class="form-control">
                </div>
                <div class="form-group">
                    <label>Gender</label>
                    <input type="radio" name="Gender" class="form-control" value="Male">Male
                    <input type="radio" name="Gender" class="form-control" value="Female">Female
                </div>
                <div class="form-group">
                    <label>City</label>
                    <select name="City" id="City">
                        <option value="Surat">Surat</option>
                        <option value="Valsad">Valsad</option>
                        <option value="Vapi">Vapi</option>
                    </select>
                    </div>
                <div class="form-group">
                    <label>Image</label>
                    <input type="file" name="pic" class="form-control">
                </div>
                <div class="form-group">
                    <button type="submit" class="btn btn-success">Submit</button>
                </div>
    </form>
</body>
Edit
<body>
    <h1>{{viewTitle}}</h1>
    <form action="/student/edit/{{student._id}}" method="post">
                <div class="form-group">
                    <label>ID</label>
                    <input disabled type="text" name="id" class="form-control" value="{{student._id}}">
                </div>
                <div class="form-group">
                    <label>Name</label>
                    <input type="text" name="Name" class="form-control" value="{{student.Name}}">
                </div>
                <div class="form-group">
                    <label>Email</label>
                    <input type="email" name="Email" class="form-control" value="{{student.Email}}">
                </div>
                <div class="form-group">
                    <label>Contactno</label>
                    <input type="number" name="Contactno" class="form-control" value="{{student.Contactno}}">
                </div>
                <div class="form-group">
                    <label>Gender</label>
                    <input type="radio" name="Gender" class="form-control" value="Male"  {{#if "student.Gender== 'Male'"}} checked {{/if}}>Male
                    <input type="radio" name="Gender" class="form-control" value="Female" {{#if "student.Gender =='FeMale' "}} checked {{/if}}>Female
                </div>
                <div class="form-group">
                    <label>City</label>
                    <select name="City" id="City">
                        <option value="Surat"  {{#if "student.City== 'Surat'"}} selected {{/if}}>Surat</option>
                        <option value="Valsad"  {{#if "student.City== 'Valsad'"}} selected {{/if}}>Valsad</option>
                        <option value="Vapi" {{#if "student.City== 'Vapi'"}} selected {{/if}}>Vapi</option>
                    </select>
                </div>
                <div class="form-group">
                    <button type="submit" class="btn btn-success">Submit</button>
                </div>
    </form>
</body>
---list
<body>
    <h1>{{viewTitle}}</h1>
    <p>{{email}}</p>
    <a href="/student">Add</a>
    <a href="/logout">logout</a>
    <table border="1">
        <thead>
            <tr>
                <th>Name</th>
                <th>Image</th>
                <th>Email</th>
                <th>Contactno</th>
                <th>Gender</th>
                <th>City</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            {{#each list}}
            <tr>
                <td>{{this.Name}}</td>
                <td>
                    <img src="/images/{{this.pic}}" height="200px" width="200px" alt="no" />
                </td>
                <td>{{this.Email}}</td>
                <td>{{this.Contactno}}</td>
                <td>{{this.Gender}}</td>
                <td>{{this.City}}</td>
                <td><a href="/student/edit/{{this._id}}">Edit</a></td>
                <td><a href="/student/delete/{{this._id}}">Delete</a></td>
            </tr>
            {{/each}}
        </tbody>
    </table>
</body>
---login
<form method="post" action="/login">
        <div class="form-group">
            <label for="exampleInputEmail1">Email address</label>
            <input type="email" class="form-control" name="email" id="exampleInputEmail1" aria-describedby="emailHelp" placeholder="Enter email">
            <small id="emailHelp" class="form-text text-muted">We'll never share your email with anyone else.</small>
        </div>
            <div class="form-group">
                <label for="exampleInputPassword1">Password</label>
                <input type="password" class="form-control" name="password" id="exampleInputPassword1" placeholder="Password">
            </div>
            <button type="submit" class="btn btn-primary">Submit</button>
    </form>
--image folder structure
public->images
